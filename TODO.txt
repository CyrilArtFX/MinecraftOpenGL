== COURT TERME ==

~ Optimiser le renderer pour trier les objets par shader et pas par material (plusieurs materials utilisent le même shader = pas opti actuellement)

~ Intégrer le système de lecture de meshs (tuto learnopengl)

~ Changer le duo game/scene en un trio engine/game/scene où :
	- engine correspond globalement au game actuel et s'occupe de gérer les events globaux et de dispatch l'update, le draw et les inputs (engine contiendra un pointeur vers l'interface game et plus l'interface scene)
	- game correspond à la partie logique de scene actuel et contiendra la logique propre à chaque jeu (game contiendra un pointeur vers l'interface scene)
	- scene correspond à la partie load de scene actuel et s'occupera de charger/décharger les objets
Question : quand l'ECS sera intégré, ça sera engine ou game qui appellera les components ? et quand ces components seront créé dans scene du coup, comment ils se renseigneront ?

~ Changer le système d'objet pour séparer la logique 'transform' et la logique 'mesh renderer' (ça sera amené à être dans 2 composants différents avec l'ECS)


== MOYEN TERME ==

~ Intégrer l'ECS (attendre le cours sur le multithreading dans un engine)

~ Créer un système de HUD (intégrer le texte tout de suite ?)

~ Améliorer le système de lumière

~ Faire le système des ombres

