== COURT TERME ==

~ Changer le duo game/scene en un trio engine/game/scene où :
	- engine correspond globalement au game actuel et s'occupe de gérer les events globaux et de dispatch l'update et le draw (engine contiendra un pointeur vers l'interface game et plus l'interface scene)
	- game sera un ajout pour des fonctionnalités globales dans un jeu qui survivraient au changement de scène (game contiendra un pointeur vers l'interface scene)
	- scene correspond globalement au scene actuel avec le chargement des objets et de leur transmettre les update si besoin. scene devra toujours être capable de fournir une caméra comme actuellement.

~ Mettre un système de physique basique pour le doomlike (collisions cubes AABB, gravité, raycasts)

~ Faire le doomlike (omg ?)


== MOYEN TERME ==

~ Créer un système de HUD (intégrer le texte tout de suite ?)

~ Ajouter un système d'events (observer pattern) pour notamment un event lorsque la pause est activée

~ Améliorer le système de lumière

~ Faire le système des ombres

~ Mettre un vrai système de physique

~ Intégrer l'ECS (attendre le cours sur le multithreading dans un engine)


== REFLEXIONS ==

~ Mettre le renderer en classe statique ? permettrait d'assigner certains assets (comme les materiaux) directement à la création par exemple + de ne pas avoir à le passer en paramètre pour le joueur qui va devoir créer des balles (par exemple)

~ Mettre un système pour détecter automatiquement la profondeur de couleur au chargement de la texture pour éviter les problèmes (si la profondeur de couleur est 24, pas d'alpha (même avec un .png), donc charger avec GL_RGBA va faire un crash) -> regarder comment gregory a fait pour xenity

~ Quand l'asset manager doit retourner une valeur nulle parce que la valeur demandée est inexistante, au lieu de créer une variable temporaire et de retourner un pointeur vers cette variable (pas ouf), plutôt avoir dans chaque liste d'asset une valeur "par défaut" à pouvoir retourner au besoin

~ Créer une classe (statique) pour mettre les vertex arrays (meshes) par défaut dans l'asset manager (le cube et le plane), réutilisable facilement (plus besoin de recoder les vertex dans scene) et utilisables pour le debug des cubes physiques

~ Réfléchir au fonctionnement du load asset des scenes, est-ce qu'il faudrait faire gaffe à l'utilisation de ram et unload genre les textures qui ne sont plus nécessaires ?