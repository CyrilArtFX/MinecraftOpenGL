== COURT TERME ==

~ Faire le doomlike (partie 1)
	-> Faire un système de GameplayStatics pour pouvoir récupérer la référence au Game et à la Scene - fait
	-> Faire la base de l'ennemi (mesh, raycast vers le joueur, orientation, réaction aux balles) - fait
	-> Mettre les meshs d'arme et de balles - fait
	-> Intégrer la mort du joueur - fait
	-> Récupérer des meshs/textures pour un décor - en cours
	-> Faire un premier niveau simpliste
	-> Faire un système pour faire réagir une partie du niveau en fonction des ennemis tués
	-> Faire le système de trigger qui ferait réagir des parties du niveau (lumière, objets...)
	-> Améliorer l'ennemi avec le déplacement vers le joueur
	-> Faire un bon niveau avec des salles et des éléments cinématiques sur les lumières et autres


== MOYEN TERME ==

~ Intégrer du son (avec fmod ?)

~ Créer un système de HUD (intégrer le texte tout de suite ?)

~ Faire une classe debug qui permet de gérer les logs dans la console et sur l'écran (à la manière d'unreal)

~ Utiliser le système d'event pour les fonctionnalités importantes du moteur (pause, etc.)


== LONG TERME ==

~ Intégrer l'ECS (pas FLECS pour l'instant, mais un système assez simple qui permettrait au moins de mieux gérer les collisions, les meshs, etc.)

~ Améliorer le système de lumière

~ Faire le système des ombres

~ Animations 3D : https://ogldev.org/www/tutorial38/tutorial38.html

~ "Finir" la physique avec la répulsion des collisions body/body (imagine pousser une caisse dans un mur oskour)


== TRES LONG TERME == (aka ça sera jamais fait)

~ Mettre des particules

~ Mettre un système de physique supportant plus que du AABB

~ Mettre un editeur :skull:


== REFLEXIONS ==

~ Mettre le renderer en classe statique ? permettrait d'assigner certains assets (comme les materiaux) directement à la création par exemple + de ne pas avoir à le passer en paramètre pour le joueur qui va devoir créer des balles (par exemple)

~ Mettre un système pour détecter automatiquement la profondeur de couleur au chargement de la texture pour éviter les problèmes (si la profondeur de couleur est 24, pas d'alpha (même avec un .png), donc charger avec GL_RGBA va faire un crash) -> regarder comment gregory a fait pour xenity

~ Mettre un raycast cube AABB en sweep qui utiliserais les algos utilisés pour le ccd (pourrait permettre d'améliorer la qualité du système de step, mais au prix de perfs)

~ Réfléchir au fonctionnement du load asset des scenes, est-ce qu'il faudrait faire gaffe à l'utilisation de ram et unload genre les textures qui ne sont plus nécessaires ?

~ Les objets scenes sont créés avant que le loadDefaultAssets soit appelé par l'objet game ?

~ Regarder la projection d'un vecteur sur une surface pour remplacer l'espèce d'harcoding bizarre pour annuler la vélocité vers la collision (en plus c'est un bon point de maths pour les entretiens)

~ Trouver une solution pour les problèmes de rotations avec la caméra (étudier unreal ? réussir à combiner la matrice de la caméra et celle du joueur ?)

~ Essayer de comprendre pourquoi si les bullets sont pas stockées en unique_ptr ça fait complètement n'importe quoi (genre c'est abusé de fou)
Infos sur le problème :
 - même en créant la bullet dans la liste directement et en faisant le setup depuis là ça bug
 - si y'en a qu'une à la fois ça a l'air d'aller
 - c'est le iter_swap qui pose problème ?
 - avec le système que j'avais, ça supprimait la première balle (seulement visuellement mais aucune fonction de suppression n'était appelée) et quand je spammais ça crashait