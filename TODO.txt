== COURT TERME ==

~ Créer un système de HUD (affichage de sprites et de texte au dessus du jeu) - en cours
	- Faire la partie Text Rendering de learnopengl.com le plus fidèlement possible - fait
	- Faire les modifs d'opti de la vidéo du gars (https://www.youtube.com/watch?v=S0PyZKX4lyI) - fait
	- Integrer proprement le rendering de texte dans les outils du moteur - fait
	- Faire un rendering de sprite (nique learnopengl.com sur ce coup là xD) - fait
	- Regarder pour la rotation des élements de HUD (voir comment faire dans le shader) - fait
	- Faire un outil basique de HUD - en cours
		¤ Faire une classe parent pour les deux élements de HUD - fait
		¤ Faire les ancres sur l'écran
		¤ Faire l'event on screen resize et bind automatiquement les hud dessus

~ Intégrer du HUD dans le doomlike

~ Changer légèrement le 'load default assets' pour mettre un 'load engine assets' à la place (vu qu'actuellement y'a bcp de choses qui marchent pas dans le moteur si le load default asset est pas appelé c'est un peu con)

~ Opti les rendus debug de raycast en arrêtant de créer des VAO et VBO à chaque raycast (mettre ça dans le load engine assets :eyes:)


== MOYEN TERME ==

~ Faire les modifs pour pouvoir lancer le moteur en release
	- Compiler les lib en release mode (et séparer les lib debug des lib release + update le build event qui les copie automatiquement)
	- Finir de modifier les vcxproj pour que tout marche bien (notamment sur le projet doomlike et le projet template)

~ Faire une classe debug qui permet de gérer les logs dans la console et sur l'écran (à la manière d'unreal) + fichier de log généré

~ Corriger le problème sur l'affichage des textures à longue distance (anti aliasing ? anisotropie truc ? (jsp))
	(peut être regarder si ça vaut pas le coup de faire toute ou presque toute la partie Advanced OpenGL de learnopengl.com)

~ Intégrer l'ECS (la logique de base de l'ECS qui fait que les entités ne sont plus que des objets qui ont la référence de leurs components, mais les components ont une logique interne, donc pas un système aussi poussé que celui de FLECS, plus à la Unity)
	- Faire un custom memory manager ?

~ Faire un éditeur de prefab (besoin d'un système de HUD plus poussé ?)

~ Mettre de meilleurs visuels pour le doomlike en utilisant l'éditeur de prefab


== LONG TERME ==

~ Améliorer le système de lumière (tutos learnopengl.com)

~ Faire le système des ombres (tutos learnopengl.com)

~ Mettre des particules (avec ces vidéos ? https://www.youtube.com/watch?v=4YhQJPD7ylQ)

~ Animations 3D : https://ogldev.org/www/tutorial38/tutorial38.html

~ "Finir" la physique avec la répulsion des collisions body/body (imagine pousser une caisse dans un mur oskour)


== TRES LONG TERME == (aka ça sera jamais fait)

~ Mettre un éditeur de level à partir de l'éditeur de prefabs

~ Mettre un système de physique supportant plus que du AABB

~ Mettre un éditeur complet :skull:


== AUTRES ==

~ Finir les sons dans le doomlike (mouvement ennemis, mur qui bouge, lumière qui s'allume)

~ Réussir à intégrer les collisions des sons de FMod

~ Mettre un text renderer component 3D

~ Opti le rendering de texte pour utiliser moins de matrices, générer une matrice transform pour tout le texte et passer les position et scale des char via un vec4 au shader qui se charge de la fin des calculs ?


== REFLEXIONS / PROBLEMES CONNUS ==

~ Trouver une solution pour les problèmes de rotations avec la caméra qui fait qu'on ne peut pas lui forcer une rotation sans casser le système de pitch et de yaw intégré.

~ Le look at rotation des ennemis du doomlike bug un petit peu ?

~ Problème avec la physique, si on touche par le bas une collision qui bouge, on est tp au dessus

~ Réfléchir au fonctionnement du load asset des scenes, est-ce qu'il faudrait faire gaffe à l'utilisation de ram et unload genre les textures qui ne sont plus nécessaires ?

~ Il peut y avoir des problèmes avec la physique notamment dans les coins ou entre des collisions quand on bouge et qu'on spam le saut, genre on est téléporté à travers d'autres collisions. Raison inconnue.