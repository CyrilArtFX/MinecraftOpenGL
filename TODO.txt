== COURT TERME ==

~ Mettre le système d'inputs propre

~ Changer le duo game/scene en un trio engine/game/scene où :
	- engine correspond globalement au game actuel et s'occupe de gérer les events globaux et de dispatch l'update, le draw et les inputs (engine contiendra un pointeur vers l'interface game et plus l'interface scene)
	- game correspond à la partie logique de scene actuel et contiendra la logique propre à chaque jeu (game contiendra un pointeur vers l'interface scene)
	- scene correspond à la partie load de scene actuel et s'occupera de charger/décharger les objets

~ Mettre un système de physique basique pour le doomlike (collisions cubes AABB, gravité, raycasts)

~ Faire le doomlike (omg ?)


== MOYEN TERME ==

~ Intégrer l'ECS (attendre le cours sur le multithreading dans un engine)

~ Créer un système de HUD (intégrer le texte tout de suite ?)

~ Améliorer le système de lumière

~ Faire le système des ombres

~ Mettre un vrai système de physique


== REFLEXIONS ==

~ Mettre le renderer en classe statique ? permettrait d'assigner certains assets (comme les materiaux) directement à la création par exemple + de ne pas avoir à le passer en paramètre pour le joueur qui va devoir créer des balles

~ Mettre un système pour détecter automatiquement la profondeur de couleur au chargement de la texture pour éviter les problèmes (si la profondeur de couleur est 24, pas d'alpha (même avec un .png), donc charger avec GL_RGBA va faire un crash) -> regarder comment gregory a fait pour xenity